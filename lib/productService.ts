// lib/productService.ts

import { fetcher } from './api'; // Import fetcher từ file api.ts đã tạo

// Định nghĩa lại các interface DTO (Data Transfer Object) cho frontend
// Sẽ khớp với dữ liệu trả về từ backend hoặc dữ liệu gửi đi

export interface ProductFrontend {
    _id?: string; // Optional for creation, present for fetched products
    id?: number; // Optional for creation, present for fetched products
    ten_sp: string;
    slug?: string; // Generated by backend
    id_loai: number;
    id_thuong_hieu: number | null;
    mo_ta: string;
    chat_lieu: string;
    xuat_xu: string;
    variants: VariantFrontend[];
    hinh_anh?: string[];
    hot: boolean;
    an_hien: boolean;
    luot_xem?: number; // Generated by backend
    tags?: string[];
    meta_title?: string;
    meta_description?: string;
    meta_keywords?: string;
    created_at?: string; // Generated by backend
    updated_at?: string; // Generated by backend
}

export interface VariantFrontend {
    _id?: string; // Optional for new variants, present for existing
    sku: string;
    kich_thuoc: string;
    mau_sac: string;
    gia: number;
    gia_km: number | null;
    phan_tram_km?: number; // Calculated by backend
    so_luong: number;
    so_luong_da_ban?: number; // Managed by backend
    hinh_chinh: string;
    hinh_thumbnail: string[];
}

// Interfaces cho Category và Brand để dùng trong dropdowns
export interface CategoryFrontend {
    id: number;
    ten_loai: string;
}

export interface BrandFrontend {
    id: number;
    ten_thuong_hieu: string;
}

// Interface cho Pagination
export interface PaginationInfo {
    currentPage: number;
    limit: number;
    totalItems: number;
    totalPages: number;
}

// Interface cho Product list response
export interface ProductListResponse {
    success: boolean;
    data: ProductFrontendWithPopulatedFields[];
    pagination: PaginationInfo;
}

// ProductFrontend with populated fields for display
export interface ProductFrontendWithPopulatedFields extends Omit<ProductFrontend, 'id_loai' | 'id_thuong_hieu'> {
    id_loai: { id: number; ten_loai: string };
    id_thuong_hieu: { id: number; ten_thuong_hieu: string } | null;
}


const productService = {
    // Lấy danh sách sản phẩm
    getProducts: async (
        page: number = 1,
        limit: number = 10,
        search: string = '',
        id_loai?: number, // Chú ý: truyền ID, không phải tên
        id_thuong_hieu?: number, // Chú ý: truyền ID, không phải tên
        an_hien?: boolean, // true/false
        hot?: boolean
    ): Promise<ProductListResponse> => {
        let url = `/products?page=${page}&limit=${limit}`;
        if (search) {
            url += `&search=${encodeURIComponent(search)}`;
        }
        if (id_loai !== undefined && id_loai !== null) {
            url += `&id_loai=${id_loai}`;
        }
        if (id_thuong_hieu !== undefined && id_thuong_hieu !== null) {
            url += `&id_thuong_hieu=${id_thuong_hieu}`;
        }
        if (an_hien !== undefined) {
            url += `&an_hien=${an_hien ? 'true' : 'false'}`;
        }
        if (hot !== undefined) {
            url += `&hot=${hot ? 'true' : 'false'}`;
        }
        // Backend hiện không hỗ trợ lọc giá trực tiếp, nếu muốn lọc này, cần thêm logic vào backend
        // hoặc thực hiện lọc frontend sau khi fetch.

        return fetcher<ProductListResponse>(url, 'GET');
    },

    // Lấy chi tiết sản phẩm bằng ID backend (là trường `id` của bạn, không phải `_id` MongoDB)
    getProductById: async (productId: number): Promise<{ success: boolean; data: ProductFrontendWithPopulatedFields }> => {
        return fetcher<{ success: boolean; data: ProductFrontendWithPopulatedFields }>(`/products/${productId}`, 'GET');
    },

    // Thêm sản phẩm mới
    addProduct: async (productData: ProductFrontend): Promise<{ success: boolean; message: string; data: ProductFrontend }> => {
        return fetcher<{ success: boolean; message: string; data: ProductFrontend }>(`/products`, 'POST', productData);
    },

    // Cập nhật sản phẩm
    updateProduct: async (productId: number, productData: Partial<ProductFrontend>): Promise<{ success: boolean; message: string; data: ProductFrontend }> => {
        return fetcher<{ success: boolean; message: string; data: ProductFrontend }>(`/products/${productId}`, 'PUT', productData);
    },

    // Xóa sản phẩm
    deleteProduct: async (productId: number): Promise<{ success: boolean; message: string }> => {
        return fetcher<{ success: boolean; message: string }>(`/products/${productId}`, 'DELETE');
    },

    // Lấy tất cả danh mục (cho dropdown)
    getAllCategories: async (): Promise<{ success: boolean; data: CategoryFrontend[] }> => {
        return fetcher<{ success: boolean; data: CategoryFrontend[] }>('/categories/all', 'GET');
    },

    // Lấy tất cả thương hiệu (cho dropdown)
    getAllBrands: async (): Promise<{ success: boolean; data: BrandFrontend[] }> => {
        return fetcher<{ success: boolean; data: BrandFrontend[] }>('/brands/all', 'GET');
    },

    // === API cho Variants ===
    getVariantsByProductId: async (productId: number): Promise<{ success: boolean; data: VariantFrontend[] }> => {
        return fetcher<{ success: boolean; data: VariantFrontend[] }>(`/products/${productId}/variants`, 'GET');
    },

    addVariantToProduct: async (productId: number, variantData: VariantFrontend): Promise<{ success: boolean; message: string; data: VariantFrontend }> => {
        return fetcher<{ success: boolean; message: string; data: VariantFrontend }>(`/products/${productId}/variants`, 'POST', variantData);
    },

    updateVariant: async (productId: number, variantId: string, variantData: Partial<VariantFrontend>): Promise<{ success: boolean; message: string; data: VariantFrontend }> => {
        return fetcher<{ success: boolean; message: string; data: VariantFrontend }>(`/products/${productId}/variants/${variantId}`, 'PUT', variantData);
    },

    deleteVariant: async (productId: number, variantId: string): Promise<{ success: boolean; message: string }> => {
        return fetcher<{ success: boolean; message: string }>(`/products/${productId}/variants/${variantId}`, 'DELETE');
    },
};

export default productService;